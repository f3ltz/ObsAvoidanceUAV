# -*- coding: utf-8 -*-
"""assign5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e5R6dKfc4qumIzSjf4TcJW5w2DKjKwMI
"""

import numpy as np
import matplotlib.pyplot as plt
import torch
import torch as T
import os
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import random
from collections import deque

class OUActionNoise:
    def __init__(self, mu, sigma=0.15, theta=0.2, dt=1e-2, x0=None):
        """
        Initialize the Ornstein-Uhlenbeck (OU) noise process.

        Args:
        - mu (array-like): The mean value towards which the noise will decay (target mean).
        - sigma (float): The standard deviation of the noise, controlling its magnitude.
        - theta (float): The rate at which the noise reverts to the mean (`mu`).
        - dt (float): The timestep for each noise update.
        - x0 (array-like, optional): Initial value of the noise. Defaults to zeros.

        Attributes:
        - theta: Controls how strongly the process is pulled toward `mu`.
        - sigma: Magnitude of the random fluctuations.
        - dt: Timestep for each update.
        - x0: Initial state of the noise process.
        - x_prev: Tracks the previous noise value for generating the next one.
        """
        self.theta = theta
        self.mu = mu
        self.sigma = sigma
        self.dt = dt
        self.x0 = x0
        self.reset()  # Initialize the noise state

    def __call__(self):
        """
        Generate the next noise value using the Ornstein-Uhlenbeck process.

        Formula:
        x_next = x_prev + theta * (mu - x_prev) * dt + sigma * sqrt(dt) * N(0, 1)

        Returns:
        - x (array-like): The updated noise value.
        """
        # Calculate the next value based on the OU formula
        x = (self.x_prev +
             self.theta * (self.mu - self.x_prev) * self.dt +  # Drift term
             self.sigma * np.sqrt(self.dt) * np.random.normal(size=self.mu.shape))  # Random fluctuation term
        self.x_prev = x  # Update the previous value
        return x  # Return the current noise value

    def reset(self):
        """
        Reset the noise process to its initial state.
        If `x0` is provided, it resets to `x0`. Otherwise, it resets to zero.
        """
        self.x_prev = self.x0 if self.x0 is not None else np.zeros_like(self.mu)

class DynamicEnvironment:
    def __init__(self, size=(10, 10), max_velocity=1.0, goal_update_interval=20):
        self.size = size
        self.max_velocity = max_velocity
        self.goal_update_interval = goal_update_interval
        self.step_count = 0
        self.reset()

    def reset(self):
        """Resets the environment to its initial state."""
        self.agent_position = np.array([np.random.uniform(0, self.size[0]), np.random.uniform(0, self.size[1])])
        self.goal_position = self._generate_new_goal()
        self.step_count = 0
        return self.agent_position, self.goal_position

    def _generate_new_goal(self):
        """Generates a new random goal position within the environment boundaries."""
        return np.array([np.random.uniform(0, self.size[0]), np.random.uniform(0, self.size[1])])

    def step(self, action):
        """Takes an action to update the environment state.

        Args:
            action (np.array): A 2D action vector representing velocity (dx, dy).

        Returns:
            tuple: (agent_position, goal_position, reward, done)
        """
        reward = -1  # Step penalty to discourage inefficiency

        # Check for exceeding maximum velocity
        if np.any(np.abs(action) > self.max_velocity):
            reward -= 10  # Penalty for exceeding velocity constraint
            action = np.clip(action, -self.max_velocity, self.max_velocity)

        # Apply velocity constraints and update agent position
        self.agent_position += action

        # Check for boundary violations
        if np.any(self.agent_position < 0) or np.any(self.agent_position > self.size):
            reward -= 5  # Penalty for moving out of bounds
            self.agent_position = np.clip(self.agent_position, 0, [self.size[0], self.size[1]])

        # Check for goal update
        self.step_count += 1
        if self.step_count % self.goal_update_interval == 0:
            self.goal_position = self._generate_new_goal()


        # Compute reward for proximity to goal
        distance_to_goal = np.linalg.norm(self.agent_position - self.goal_position)
        if distance_to_goal < 0.5:
            reward += 10  # Reward for reaching the goal
            done = True
        else:
            done = False

        return self.agent_position, self.goal_position,  reward, done

    def render(self):
        """Renders the current state of the environment as a single frame."""
        fig, ax = plt.subplots(figsize=(6, 6))
        ax.set_xlim(0, self.size[0])
        ax.set_ylim(0, self.size[1])
        ax.plot(self.agent_position[0], self.agent_position[1], 'bo', label='Agent')
        ax.plot(self.goal_position[0], self.goal_position[1], 'ro', label='Goal')
        ax.legend()
        ax.set_title("Environment State")
        plt.show()

class ReplayBuffer():
    def __init__(self, max_size, input_shape, n_actions):
        self.mem_size = max_size
        self.mem_cntr = 0
        self.state_memory = np.zeros((self.mem_size, input_shape))
        self.new_state_memory = np.zeros((self.mem_size, input_shape))
        self.action_memory = np.zeros((self.mem_size, n_actions))
        self.reward_memory = np.zeros(self.mem_size)
        self.terminal_memory = np.zeros(self.mem_size, dtype=bool)

    def store_transition(self, state, action, reward, state_, done):
        index = self.mem_cntr % self.mem_size
        self.state_memory[index] = state
        self.action_memory[index] = action
        self.reward_memory[index] = reward
        self.new_state_memory[index] = state_
        self.terminal_memory[index] = done

        self.mem_cntr += 1

    def sample_buffer(self, batch_size):
        max_mem = min(self.mem_cntr, self.mem_size)

        batch = np.random.choice(max_mem, batch_size)

        states = self.state_memory[batch]
        actions = self.action_memory[batch]
        rewards = self.reward_memory[batch]
        states_ = self.new_state_memory[batch]
        dones = self.terminal_memory[batch]

        return states, actions, rewards, states_, dones

class CriticNetwork(nn.Module):
    def __init__(self, beta, input_dims, fc1_dims, fc2_dims, n_actions,
            name, chkpt_dir='tmp/td3'):
        super(CriticNetwork, self).__init__()
        self.input_dims = input_dims
        self.fc1_dims = fc1_dims
        self.fc2_dims = fc2_dims
        self.n_actions = n_actions
        self.name = name
        self.checkpoint_dir = chkpt_dir
        self.checkpoint_file = os.path.join(self.checkpoint_dir, name+'_td3')

        # I think this breaks if the env has a 2D state representation
        self.fc1 = nn.Linear(self.input_dims + n_actions, self.fc1_dims)
        self.fc2 = nn.Linear(self.fc1_dims, self.fc2_dims)
        self.q1 = nn.Linear(self.fc2_dims, 1)

        self.optimizer = optim.Adam(self.parameters(), lr=beta)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')

        self.to(self.device)

    def forward(self, state, action):
        q1_action_value = self.fc1(T.cat([state, action], dim=1))
        q1_action_value = F.relu(q1_action_value)
        q1_action_value = self.fc2(q1_action_value)
        q1_action_value = F.relu(q1_action_value)

        q1 = self.q1(q1_action_value)

        return q1

    def save_checkpoint(self):
        print('... saving checkpoint ...')
        T.save(self.state_dict(), self.checkpoint_file)

    def load_checkpoint(self):
        print('... loading checkpoint ...')
        self.load_state_dict(T.load(self.checkpoint_file))

class ActorNetwork(nn.Module):
    def __init__(self, alpha, input_dims, fc1_dims, fc2_dims,
            n_actions, name, chkpt_dir='tmp/td3'):
        super(ActorNetwork, self).__init__()
        self.input_dims = input_dims
        self.fc1_dims = fc1_dims
        self.fc2_dims = fc2_dims
        self.n_actions = n_actions
        self.name = name
        self.checkpoint_dir = chkpt_dir
        self.checkpoint_file = os.path.join(self.checkpoint_dir, name+'_td3')

        self.fc1 = nn.Linear(self.input_dims, self.fc1_dims)
        self.fc2 = nn.Linear(self.fc1_dims, self.fc2_dims)
        self.mu = nn.Linear(self.fc2_dims, self.n_actions)

        self.optimizer = optim.Adam(self.parameters(), lr=alpha)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')

        self.to(self.device)

    def forward(self, state):
        prob = self.fc1(state)
        prob = F.relu(prob)
        prob = self.fc2(prob)
        prob = F.relu(prob)

        prob = T.tanh(self.mu(prob)) # if action is > +/- 1 then multiply by max action

        return prob

    def save_checkpoint(self):
        print('... saving checkpoint ...')
        T.save(self.state_dict(), self.checkpoint_file)

    def load_checkpoint(self):
        print('... loading checkpoint ...')
        self.load_state_dict(T.load(self.checkpoint_file))

class Agent():
    def __init__(self, alpha, beta, input_dims, tau, env,
            gamma=0.99, update_actor_interval=2, warmup=1000,
            n_actions=2, max_size=1000000, layer1_size=400,
            layer2_size=300, batch_size=100, noise=0.1):
        self.gamma = gamma
        self.tau = tau
        self.max_action = 1
        self.min_action = 0
        self.memory = ReplayBuffer(max_size, input_dims, n_actions)
        self.batch_size = batch_size
        self.learn_step_cntr = 0
        self.time_step = 0
        self.warmup = warmup
        self.n_actions = n_actions
        self.update_actor_iter = update_actor_interval

        self.actor = ActorNetwork(alpha, input_dims, layer1_size,
                                  layer2_size, n_actions=n_actions,
                                  name='actor')
        self.critic_1 = CriticNetwork(beta, input_dims, layer1_size,
                                      layer2_size, n_actions=n_actions,
                                      name='critic_1')
        self.critic_2 = CriticNetwork(beta, input_dims, layer1_size,
                                      layer2_size, n_actions=n_actions,
                                      name='critic_2')

        self.target_actor = ActorNetwork(alpha, input_dims, layer1_size,
                                         layer2_size, n_actions=n_actions,
                                         name='target_actor')
        self.target_critic_1 = CriticNetwork(beta, input_dims, layer1_size,
                                         layer2_size, n_actions=n_actions,
                                         name='target_critic_1')
        self.target_critic_2 = CriticNetwork(beta, input_dims, layer1_size,
                                         layer2_size, n_actions=n_actions,
                                         name='target_critic_2')

        self.noise = noise
        self.update_network_parameters(tau=1)

    def choose_action(self, observation):
        if self.time_step < self.warmup:
            mu = T.tensor(np.random.normal(scale=self.noise, size=(self.n_actions,)))
        else:
            state = T.tensor(observation, dtype=T.float).to(self.actor.device)
            mu = self.actor.forward(state).to(self.actor.device)
        mu_prime = mu + T.tensor(np.random.normal(scale=self.noise),
                dtype=T.float).to(self.actor.device)
        mu_prime = T.clamp(mu_prime, self.min_action, self.max_action)
        self.time_step += 1
        return mu_prime.cpu().detach().numpy()

    def remember(self, state, action, reward, new_state, done):
        self.memory.store_transition(state, action, reward, new_state, done)

    def learn(self):
        if self.memory.mem_cntr < self.batch_size:
            return

        state, action, reward, new_state, done = \
                self.memory.sample_buffer(self.batch_size)

        reward = T.tensor(reward, dtype=T.float).to(self.critic_1.device)
        done = T.tensor(done).to(self.critic_1.device)
        state_ = T.tensor(new_state, dtype=T.float).to(self.critic_1.device)
        state = T.tensor(state, dtype=T.float).to(self.critic_1.device)
        action = T.tensor(action, dtype=T.float).to(self.critic_1.device)

        target_actions = self.target_actor.forward(state_)
        target_actions = target_actions + \
                T.clamp(T.tensor(np.random.normal(scale=0.2)), -0.5, 0.5)
        # might break if elements of min and max are not all equal
        target_actions = T.clamp(target_actions, self.min_action, self.max_action)

        q1_ = self.target_critic_1.forward(state_, target_actions)
        q2_ = self.target_critic_2.forward(state_, target_actions)

        q1 = self.critic_1.forward(state, action)
        q2 = self.critic_2.forward(state, action)

        q1_[done] = 0.0
        q2_[done] = 0.0

        q1_ = q1_.view(-1)
        q2_ = q2_.view(-1)

        critic_value_ = T.min(q1_, q2_)

        target = reward + self.gamma*critic_value_
        target = target.view(self.batch_size, 1)

        self.critic_1.optimizer.zero_grad()
        self.critic_2.optimizer.zero_grad()

        q1_loss = F.mse_loss(target, q1)
        q2_loss = F.mse_loss(target, q2)
        critic_loss = q1_loss + q2_loss
        critic_loss.backward()

        self.critic_1.optimizer.step()
        self.critic_2.optimizer.step()

        self.learn_step_cntr += 1

        if self.learn_step_cntr % self.update_actor_iter != 0:
            return

        self.actor.optimizer.zero_grad()
        actor_q1_loss = self.critic_1.forward(state, self.actor.forward(state))
        actor_loss = -T.mean(actor_q1_loss)
        actor_loss.backward()
        self.actor.optimizer.step()

        self.update_network_parameters()

    def update_network_parameters(self, tau=None):
        if tau is None:
            tau = self.tau

        actor_params = self.actor.named_parameters()
        critic_1_params = self.critic_1.named_parameters()
        critic_2_params = self.critic_2.named_parameters()
        target_actor_params = self.target_actor.named_parameters()
        target_critic_1_params = self.target_critic_1.named_parameters()
        target_critic_2_params = self.target_critic_2.named_parameters()

        critic_1_state_dict = dict(critic_1_params)
        critic_2_state_dict = dict(critic_2_params)
        actor_state_dict = dict(actor_params)
        target_actor_state_dict = dict(target_actor_params)
        target_critic_1_state_dict = dict(target_critic_1_params)
        target_critic_2_state_dict = dict(target_critic_2_params)

        for name in critic_1_state_dict:
            critic_1_state_dict[name] = tau*critic_1_state_dict[name].clone() + \
                    (1-tau)*target_critic_1_state_dict[name].clone()

        for name in critic_2_state_dict:
            critic_2_state_dict[name] = tau*critic_2_state_dict[name].clone() + \
                    (1-tau)*target_critic_2_state_dict[name].clone()

        for name in actor_state_dict:
            actor_state_dict[name] = tau*actor_state_dict[name].clone() + \
                    (1-tau)*target_actor_state_dict[name].clone()

        self.target_critic_1.load_state_dict(critic_1_state_dict)
        self.target_critic_2.load_state_dict(critic_2_state_dict)
        self.target_actor.load_state_dict(actor_state_dict)

    def save_models(self):
        self.actor.save_checkpoint()
        self.target_actor.save_checkpoint()
        self.critic_1.save_checkpoint()
        self.critic_2.save_checkpoint()
        self.target_critic_1.save_checkpoint()
        self.target_critic_2.save_checkpoint()

    def load_models(self):
        self.actor.load_checkpoint()
        self.target_actor.load_checkpoint()
        self.critic_1.load_checkpoint()
        self.critic_2.load_checkpoint()
        self.target_critic_1.load_checkpoint()
        self.target_critic_2.load_checkpoint()

env = DynamicEnvironment(size=(10, 10), max_velocity=1.0, goal_update_interval=20)

# Initialize agent
input_dims = 4  # Agent position (x, y)
n_actions = 2  # Velocity components (dx, dy)
agent = Agent(alpha=0.001, beta=0.001, input_dims=input_dims, tau=0.005, env=env, gamma=0.99, n_actions=n_actions)

# Training parameters
num_episodes = 1500
max_steps = 500
rewards = []

def plot_rewards_vs_episodes(rewards, filename='rewards_vs_episodes.png'):
    """
    Plots the total rewards vs episodes graph.

    Parameters:
        rewards (list): List of total rewards for each episode.
        filename (str): Optional filename to save the plot.
    """
    episodes = list(range(1, len(rewards) + 1))

    plt.figure(figsize=(10, 6))
    plt.plot(episodes, rewards, label='Total Rewards', color='b', lw=2)
    plt.title('Rewards vs Episodes')
    plt.xlabel('Episode')
    plt.ylabel('Total Reward')
    plt.grid(True)
    plt.legend()

    # Save the plot
    plt.savefig(filename)
    plt.show()

# Training loop
for episode in range(num_episodes):
    state, goal = env.reset()  # Reset environment
    state = np.concatenate((state, goal))  # Combine agent and goal positions as observation
    episode_reward = 0

    if episode%100 == 0:
        plot_rewards_vs_episodes(rewards, filename=f'rewards_vs_episodes_{episode}.png')

    for step in range(max_steps):
        action = agent.choose_action(state)  # Get action from agent
        action = np.clip(action, -env.max_velocity, env.max_velocity)  # Ensure action is valid

        # Step environment
        next_state, goal_position, reward, done = env.step(action)
        next_state = np.concatenate((next_state, goal_position))  # Next observation

        # Store transition and learn
        agent.remember(state, action, reward, next_state, done)
        agent.learn()

        # Update state and accumulate reward
        state = next_state
        episode_reward += reward

        if done:
            print(f"Episode {episode + 1} finished in {step + 1} steps with reward {episode_reward:.2f}")
            break

    rewards.append(episode_reward)

    if episode % 10 == 0:
        agent.save_models()  # Save models periodically

print("Training complete!")