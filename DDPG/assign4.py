# -*- coding: utf-8 -*-
"""assign4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19VFQtwfPb8SzGnHEJtmFCO7Q9seCQzTn
"""

import numpy as np
import matplotlib.pyplot as plt
import torch
import torch as T
import os
import torch.nn as nn
import torch.nn.functional as F
import torch.optim as optim
import random
from collections import deque

class OUActionNoise:
    def __init__(self, mu, sigma=0.15, theta=0.2, dt=1e-2, x0=None):
        """
        Initialize the Ornstein-Uhlenbeck (OU) noise process.

        Args:
        - mu (array-like): The mean value towards which the noise will decay (target mean).
        - sigma (float): The standard deviation of the noise, controlling its magnitude.
        - theta (float): The rate at which the noise reverts to the mean (`mu`).
        - dt (float): The timestep for each noise update.
        - x0 (array-like, optional): Initial value of the noise. Defaults to zeros.

        Attributes:
        - theta: Controls how strongly the process is pulled toward `mu`.
        - sigma: Magnitude of the random fluctuations.
        - dt: Timestep for each update.
        - x0: Initial state of the noise process.
        - x_prev: Tracks the previous noise value for generating the next one.
        """
        self.theta = theta
        self.mu = mu
        self.sigma = sigma
        self.dt = dt
        self.x0 = x0
        self.reset()  # Initialize the noise state

    def __call__(self):
        """
        Generate the next noise value using the Ornstein-Uhlenbeck process.

        Formula:
        x_next = x_prev + theta * (mu - x_prev) * dt + sigma * sqrt(dt) * N(0, 1)

        Returns:
        - x (array-like): The updated noise value.
        """
        # Calculate the next value based on the OU formula
        x = (self.x_prev +
             self.theta * (self.mu - self.x_prev) * self.dt +  # Drift term
             self.sigma * np.sqrt(self.dt) * np.random.normal(size=self.mu.shape))  # Random fluctuation term
        self.x_prev = x  # Update the previous value
        return x  # Return the current noise value

    def reset(self):
        """
        Reset the noise process to its initial state.
        If `x0` is provided, it resets to `x0`. Otherwise, it resets to zero.
        """
        self.x_prev = self.x0 if self.x0 is not None else np.zeros_like(self.mu)

class DynamicEnvironment:
    def __init__(self, size=(10, 10), max_velocity=1.0, goal_update_interval=20):
        self.size = size
        self.max_velocity = max_velocity
        self.goal_update_interval = goal_update_interval
        self.step_count = 0
        self.fig, self.ax = plt.subplots(figsize=(6, 6))
        plt.ion()
        self.reset()

    def reset(self):
        """Resets the environment to its initial state."""
        self.agent_position = np.array([np.random.uniform(0, self.size[0]), np.random.uniform(0, self.size[1])])
        self.goal_position = self._generate_new_goal()
        self.obs_position = self.generate_new_obs()
        self.step_count = 0
        return self.agent_position, self.goal_position, self.obs_position

    def generate_new_obs(self):
        return np.array([np.random.uniform(0, self.size[0]), np.random.uniform(0, self.size[1])])

    def _generate_new_goal(self):
        """Generates a new random goal position within the environment boundaries."""
        return np.array([np.random.uniform(0, self.size[0]), np.random.uniform(0, self.size[1])])

    def step(self, action):
        """Takes an action to update the environment state.

        Args:
            action (np.array): A 2D action vector representing velocity (dx, dy).

        Returns:
            tuple: (agent_position, goal_position, reward, done)
        """
        reward = -1  # Step penalty to discourage inefficiency

        # Check for exceeding maximum velocity
        if np.any(np.abs(action) > self.max_velocity):
            reward -= 10  # Penalty for exceeding velocity constraint
            action = np.clip(action, -self.max_velocity, self.max_velocity)

        # Apply velocity constraints and update agent position
        self.agent_position += action

        # Check for boundary violations
        if np.any(self.agent_position < 0) or np.any(self.agent_position > self.size):
            reward -= 5  # Penalty for moving out of bounds
            self.agent_position = np.clip(self.agent_position, 0, [self.size[0], self.size[1]])

        # Check for goal update
        self.step_count += 1
        if self.step_count % self.goal_update_interval == 0:
            self.goal_position = self._generate_new_goal()
            

        # Compute reward for proximity to goal
        distance_to_obs = np.linalg.norm(self.agent_position - self.obs_position)
        if distance_to_obs < 0.5:
            reward -= 10  # Reward for reaching the goal
            done = True
            return self.agent_position, self.goal_position, self.obs_position,  reward, done

        # Compute reward for proximity to goal
        distance_to_goal = np.linalg.norm(self.agent_position - self.goal_position)
        if distance_to_goal < 0.5:
            reward += 10  # Reward for reaching the goal
            done = True
        else:
            done = False

        return self.agent_position, self.goal_position, self.obs_position,  reward, done

    def render(self):
        """Renders the current state of the environment as a dynamic frame."""
        self.ax.clear()  # Clear the axes to update the frame
        self.ax.set_xlim(0, self.size[0])
        self.ax.set_ylim(0, self.size[1])
        self.ax.plot(self.agent_position[0], self.agent_position[1], 'bo', label='Agent')
        self.ax.plot(self.goal_position[0], self.goal_position[1], 'go', label='Goal')
        self.ax.plot(self.obs_position[0], self.obs_position[1], 'ro', label='Obstacle')
        self.ax.legend()
        self.ax.set_title("Environment State")
        plt.pause(0.1)

    def close(self):
        """Closes the rendering window."""
        plt.ioff()  # Turn off interactive mode
        plt.show()

class ReplayBuffer:
    def __init__(self, max_size, input_shape, n_actions):
        """
        Initialize the replay buffer.

        Args:
        - max_size (int): Maximum number of transitions the buffer can store.
        - input_shape (tuple): Shape of the state space (e.g., (state_dim,)).
        - n_actions (int): Number of actions in the action space.

        Attributes:
        - max_size: Maximum buffer size.
        - mem_cntr: Counter to keep track of the number of transitions added.
        - state_memory: Array to store states.
        - new_state_memory: Array to store the next states.
        - action_memory: Array to store actions taken.
        - reward_memory: Array to store rewards received.
        - terminal_memory: Array to store terminal flags (whether the episode ended).
        """
        self.max_size = max_size
        self.mem_cntr = 0  # Initialize the memory counter to 0

        # Initialize memory arrays
        self.state_memory = np.zeros((self.max_size, input_shape))  # Stores states
        self.new_state_memory = np.zeros((self.max_size, input_shape))  # Stores next states
        self.action_memory = np.zeros((self.max_size, n_actions))  # Stores actions
        self.reward_memory = np.zeros(self.max_size)  # Stores rewards
        self.terminal_memory = np.zeros(self.max_size, dtype=np.float32)  # Stores done flags (1 - done)

    def store_transition(self, state, action, reward, state_, done):
        """
        Store a single transition in the replay buffer.

        Args:
        - state (array): Current state.
        - action (array): Action taken in the current state.
        - reward (float): Reward received after taking the action.
        - state_ (array): Next state after taking the action.
        - done (bool): Whether the episode ended after this transition.
        """
        # Find the index to store the transition (overwrites oldest transitions if full)
        index = self.mem_cntr % self.max_size

        # Store the transition components in their respective buffers
        self.state_memory[index] = state
        self.new_state_memory[index] = state_
        self.action_memory[index] = action
        self.reward_memory[index] = reward
        self.terminal_memory[index] = 1 - done  # Store 1 if not done, 0 if done

        # Increment the memory counter
        self.mem_cntr += 1

    def sample_buffer(self, batch_size):
        """
        Sample a batch of transitions from the replay buffer.

        Args:
        - batch_size (int): Number of transitions to sample.

        Returns:
        - states (array): Batch of sampled states.
        - actions (array): Batch of sampled actions.
        - rewards (array): Batch of sampled rewards.
        - states_ (array): Batch of sampled next states.
        - dones (array): Batch of sampled terminal flags (1 - done).
        """
        # Determine the maximum number of stored transitions
        max_mem = min(self.mem_cntr, self.max_size)

        # Randomly sample `batch_size` indices from the range [0, max_mem)
        batch = np.random.choice(max_mem, batch_size, replace=False)

        # Retrieve the sampled transitions using the indices
        states = self.state_memory[batch]
        states_ = self.new_state_memory[batch]
        actions = self.action_memory[batch]
        rewards = self.reward_memory[batch]
        dones = self.terminal_memory[batch]

        return states, actions, rewards, states_, dones

# Critic Network
class Critic(nn.Module):
    def __init__(self, beta, input_dims, fc1_dims, fc2_dims, n_actions, name, chkpt_dir = 'tmp/ddpg'):
        super(Critic, self).__init__()
        self.input_dims = input_dims
        self.fc1_dims = fc1_dims
        self.fc2_dims = fc2_dims
        self.n_actions = n_actions
        self.model_name = name
        self.checkpoint_file = os.path.join(chkpt_dir, name + '_ddpg')


        self.fc1 = nn.Linear(self.input_dims, self.fc1_dims)
        f1 = 1 / np.sqrt(self.fc1.weight.data.size()[0])
        torch.nn.init.uniform_(self.fc1.weight.data, -f1, f1)
        torch.nn.init.uniform_(self.fc1.bias.data, -f1, f1)
        self.bn1 = nn.LayerNorm(self.fc1_dims)

        self.fc2 = nn.Linear(self.fc1_dims, self.fc2_dims)
        f2 = 1 / np.sqrt(self.fc2.weight.data.size()[0])
        torch.nn.init.uniform_(self.fc2.weight.data, -f2, f2)
        torch.nn.init.uniform_(self.fc2.bias.data, -f2)
        self.bn2 = nn.LayerNorm(self.fc2_dims)

        self.action_value = nn.Linear(self.n_actions, self.fc2_dims)
        f3 = 0.003
        self.q = nn.Linear(self.fc2_dims, 1)
        torch.nn.init.uniform_(self.q.weight.data, -f3, f3)
        torch.nn.init.uniform_(self.q.bias.data, -f3, f3)

        self.optimizer = optim.Adam(self.parameters(), lr=beta, weight_decay=0.01)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')

        self.to(self.device)



    def forward(self, state, action):

        state = state.to(self.device) # Ensure input is on the same device as the model
        action = action.to(self.device)
        state_value = self.fc1(state)
        state_value = self.bn1(state_value)
        state_value = F.relu(state_value)
        state_value = self.fc2(state_value)
        state_value = self.bn2(state_value)

        action_value = F.relu(self.action_value(action))
        state_action_value = F.relu(T.add(state_value, action_value))
        state_action_value = self.q(state_action_value)


        return state_action_value

    def save_checkpoint(self):
        print("....Saving Checkpoint....")
        T.save(self.state_dict(), self.checkpoint_file)

    def load_checkpoint(self):
        print("....Loading Checkpoint....")
        checkpoint = T.load(self.checkpoint_file, map_location=T.device('cpu'))  # Load the checkpoint
        self.load_state_dict(checkpoint)  # Update the model with the loaded state_dict


# Actor Network
class Actor(nn.Module):
    def __init__(self, alpha, input_dims, fc1_dims, fc2_dims, n_actions, name, chkpt_dir = 'tmp/ddpg'):
        super(Actor, self).__init__()
        self.input_dims = input_dims
        self.fc1_dims = fc1_dims
        self.fc2_dims = fc2_dims
        self.n_actions = n_actions
        self.model_name = name
        self.checkpoint_file = os.path.join(chkpt_dir, name + '_ddpg')
        self.fc1 = nn.Linear(self.input_dims, self.fc1_dims)
        f1 = 1 / np.sqrt(self.fc1.weight.data.size()[0])
        T.nn.init.uniform_(self.fc1.weight.data, -f1, f1)
        T.nn.init.uniform_(self.fc1.bias.data, -f1, f1)
        self.bn1 = nn.LayerNorm(self.fc1_dims)
        self.fc2 = nn.Linear(self.fc1_dims, self.fc2_dims)
        f2 = 1 / np.sqrt(self.fc2.weight.data.size()[0])
        T.nn.init.uniform_(self.fc2.weight.data, -f2, f2)
        T.nn.init.uniform_(self.fc2.bias.data, -f2, f2)
        self.bn2 = nn.LayerNorm(self.fc2_dims)

        f3 = 0.003
        self.mu = nn.Linear(self.fc2_dims, self.n_actions)
        T.nn.init.uniform_(self.mu.weight.data, -f3, f3)
        T.nn.init.uniform_(self.mu.bias.data, -f3, f3)

        self.optimizer = optim.Adam(self.parameters(), lr=alpha, weight_decay=0.01)
        self.device = T.device('cuda:0' if T.cuda.is_available() else 'cpu')

        self.to(self.device)


    def forward(self, state):

        state = state.to(self.device)
        x = self.fc1(state)
        x = self.bn1(x)
        x = F.relu(x)
        x = self.fc2(x)
        x = self.bn2(x)
        x = T.tanh(self.mu(x))
        return x

    def save_checkpoint(self):
        print("....Saving Checkpoint....")
        os.makedirs(os.path.dirname(self.checkpoint_file), exist_ok=True)
        T.save(self.state_dict(), self.checkpoint_file)

    def load_checkpoint(self):
        print("....Loading Checkpoint....")
        checkpoint = T.load(self.checkpoint_file, map_location=T.device('cpu'))  # Load the checkpoint
        self.load_state_dict(checkpoint)  # Update the model with the loaded state_dictsni

class Agent():
  def __init__(self, alpha, beta, input_dims, tau, env, gamma = 0.99, n_actions = 2, max_size = 1000000, layer1_size = 400, layer2_size = 300, batch_size = 64):
    self.gamma = gamma
    self.tau = tau
    self.memory = ReplayBuffer(max_size, input_dims, n_actions)
    self.batch_size = batch_size

    self.actor = Actor(alpha, input_dims, layer1_size, layer2_size, n_actions = n_actions, name = 'Actor')
    self.target_actor = Actor(alpha, input_dims, layer1_size, layer2_size, n_actions = n_actions, name = 'TargetActor')
    self.critic = Critic(beta, input_dims, layer1_size, layer2_size, n_actions = n_actions, name = 'Critic')
    self.target_critic = Critic(beta, input_dims, layer1_size, layer2_size, n_actions = n_actions, name = 'TargetCritic')

    self.noise = OUActionNoise(mu = np.zeros(n_actions))

    self.update_network_parameters(tau = 1)

  def choose_action(self, observation):
    self.actor.eval()

    observation = T.tensor(observation, dtype = T.float).to(self.actor.device)
    mu = self.actor.forward(observation)
    mu_prime = mu #+ T.tensor(self.noise(), dtype = T.float).to(self.actor.device)
    self.actor.train()
    return mu_prime.cpu().detach().numpy()

  def remember(self, state, action, reward, new_state, done):
    self.memory.store_transition(state, action, reward, new_state, done)

  def learn(self):
    if self.memory.mem_cntr < self.batch_size:
      return

    state, action, reward, new_state, done = self.memory.sample_buffer(self.batch_size)

    reward = T.tensor(reward, dtype = T.float).to(self.critic.device)
    done = T.tensor(done).to(self.critic.device)
    new_state = T.tensor(new_state, dtype = T.float).to(self.critic.device)
    action = T.tensor(action, dtype = T.float).to(self.critic.device)
    state = T.tensor(state, dtype = T.float).to(self.critic.device)

    self.target_actor.eval()
    self.target_critic.eval()
    self.critic.eval()

    target_actions = self.target_actor.forward(new_state)
    critic_value_ = self.target_critic.forward(new_state, target_actions)
    critic_value = self.critic.forward(state, action)

    target = []

    for j in range(self.batch_size):
      target.append(reward[j] + self.gamma*critic_value_[j]*done[j])
    target = T.tensor(target).to(self.critic.device)
    target = target.view(self.batch_size, 1)

    self.critic.train()
    self.critic.optimizer.zero_grad()
    critic_loss = F.mse_loss(target, critic_value)
    critic_loss.backward()
    self.critic.optimizer.step()

    self.critic.eval()
    self.actor.optimizer.zero_grad()
    mu = self.actor.forward(state)
    self.actor.train()
    actor_loss = -self.critic.forward(state, mu)
    actor_loss = T.mean(actor_loss)
    actor_loss.backward()
    self.actor.optimizer.step()

    self.update_network_parameters()

  def update_network_parameters(self, tau = None):
    if tau is None:
      tau = self.tau

    actor_params = self.actor.named_parameters()
    critic_params = self.critic.named_parameters()
    target_actor_params = self.target_actor.named_parameters()
    target_critic_params = self.target_critic.named_parameters()

    critic_state_dict = dict(critic_params)
    actor_state_dict = dict(actor_params)
    target_critic_state_dict = dict(target_critic_params)
    target_actor_state_dict = dict(target_actor_params)

    for name in critic_state_dict:
      critic_state_dict[name] = tau*critic_state_dict[name].clone() + (1-tau)*target_critic_state_dict[name].clone()

    self.target_critic.load_state_dict(critic_state_dict)

    for name in actor_state_dict:
      actor_state_dict[name] = tau*actor_state_dict[name].clone() + (1-tau)*target_actor_state_dict[name].clone()

    self.target_actor.load_state_dict(actor_state_dict)

  def save_models(self):
    self.actor.save_checkpoint()
    self.target_actor.save_checkpoint()
    self.critic.save_checkpoint()
    self.target_critic.save_checkpoint()

  def load_models(self):
    self.actor.load_checkpoint()
    self.target_actor.load_checkpoint()
    self.critic.load_checkpoint()
    self.target_critic.load_checkpoint()

def plot_rewards_vs_episodes(rewards, filename='rewards_vs_episodes.png'):
    """
    Plots the total rewards vs episodes graph.

    Parameters:
        rewards (list): List of total rewards for each episode.
        filename (str): Optional filename to save the plot.
    """
    episodes = list(range(1, len(rewards) + 1))

    plt.figure(figsize=(10, 6))
    plt.plot(episodes, rewards, label='Total Rewards', color='b', lw=2)
    plt.title('Rewards vs Episodes')
    plt.xlabel('Episode')
    plt.ylabel('Total Reward')
    plt.grid(True)
    plt.legend()

    # Save the plot
    plt.savefig(filename)
    plt.show()

env = DynamicEnvironment(size=(10, 10), max_velocity=1.0, goal_update_interval=20)

# Initialize agent
input_dims = 6  # Agent position (x, y)
n_actions = 2  # Velocity components (dx, dy)
agent = Agent(alpha=0.001, beta=0.001, input_dims=input_dims, tau=0.005, env=env, gamma=0.99, n_actions=n_actions)

# Training parameters
num_episodes = 1500
max_steps = 200
rewards = []

"""# Training loop
for episode in range(num_episodes):
    state, goal = env.reset()  # Reset environment
    state = np.concatenate((state, goal))  # Combine agent and goal positions as observation
    episode_reward = 0

    if episode%100 == 0:
        plot_rewards_vs_episodes(rewards, filename=f'rewards_vs_episodes_{episode}.png')

    for step in range(max_steps):
        action = agent.choose_action(state)  # Get action from agent
        action = np.clip(action, -env.max_velocity, env.max_velocity)  # Ensure action is valid

        # Step environment
        next_state, goal_position, reward, done = env.step(action)
        next_state = np.concatenate((next_state, goal_position))  # Next observation

        # Store transition and learn
        agent.remember(state, action, reward, next_state, done)
        agent.learn()

        # Update state and accumulate reward
        state = next_state
        episode_reward += reward

        if done:
            print(f"Episode {episode + 1} finished in {step + 1} steps with reward {episode_reward:.2f}")
            break

    rewards.append(episode_reward)

    if episode % 10 == 0:
        agent.save_models()  # Save models periodically

print("Training complete!")"""

def test_trained_actor(agent, env, num_episodes=5, render=True):
    """
    Tests the trained actor in the given environment.

    Parameters:
    - agent: The trained agent object (instance of the Agent class).
    - env: The environment object where the actor will be tested.
    - num_episodes: Number of episodes to test the actor.
    - render: Whether to render the environment during testing.

    Returns:
    - average_reward: The average reward obtained over the test episodes.
    """

    rewards = []
    total_reward = 0
    total_step = 0
    for episode in range(num_episodes):
        state, goal, obs = env.reset()  # Reset environment
        state = np.concatenate((state, goal, obs))
        episode_reward = 0
        
        step = 0
        done = False
        while not done:
            if render:
                env.render()

            # Get the action from the actor without exploration noise
            action = agent.choose_action(state)
            action = action.squeeze()  # Remove unnecessary dimensions if present
            next_state, next_goal, next_obs, reward, done = env.step(action)
            next_state = np.concatenate((next_state,next_goal, next_obs))
            episode_reward += reward
            state= next_state
            step+=1
        total_reward += episode_reward
        rewards.append(episode_reward)
        total_step +=step
        print(f"Episode {episode + 1}: Reward = {episode_reward:.2f}: Steps = {step}")
    average_step = total_step / num_episodes
    average_reward = total_reward / num_episodes
    print(f"Average Reward over {num_episodes} episodes: {average_reward:.2f}, Average Steps = {average_step}")
    plot_rewards_vs_episodes(rewards, filename=f'rewards_vs_episodes.png')
    if render:
        env.close()

    return average_reward

agent.load_models()

test_trained_actor(agent, env, num_episodes=50, render=True)
